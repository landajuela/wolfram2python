(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    180494,       3707]
NotebookOptionsPosition[    177838,       3652]
NotebookOutlinePosition[    178351,       3670]
CellTagsIndexPosition[    178308,       3667]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["wolfram2python", "Title",
 CellChangeTimes->{{3.866671702235327*^9, 3.866671705743415*^9}, {
  3.866725688193088*^9, 
  3.866725692547007*^9}},ExpressionUUID->"ad3229aa-57fe-472d-816d-\
4fd739d755b5"],

Cell[CellGroupData[{

Cell["Code Snippets", "Section",
 CellChangeTimes->{{3.8667259047766542`*^9, 3.8667259132120256`*^9}, {
  3.866726049263155*^9, 
  3.866726053954122*^9}},ExpressionUUID->"d611597b-733b-4dd8-8c20-\
ae5a9ed0044e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LISTEXAMPLE", "=", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "6"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"KEYSEXAMPLE", "=", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"STRINGEXAMPLEWOLF", "=", "\"\<\\\"Hello world\\\"\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"STRINGEXAMPLEPY", "=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"STRINGEXAMPLEWOLF", ",", 
     RowBox[{"\"\<\\\"\>\"", "->", "\"\<\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DICTEXAMPLE", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"ToString", "/@", "KEYSEXAMPLE"}], "->", "LISTEXAMPLE"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"f", ",", "x"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ":=", 
   RowBox[{"x", "+", "2"}]}], ";"}], "\n", 
 RowBox[{"FUNCEXAMPLEWolf", ":=", 
  RowBox[{"\"\<f[x_]:=\>\"", "<>", 
   RowBox[{"ToString", "[", 
    RowBox[{"f", "[", "x", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FUNCEXAMPLEPython", ":=", 
   RowBox[{"\"\<def f(x):\n\treturn \>\"", "<>", 
    RowBox[{"ToString", "[", 
     RowBox[{"f", "[", "x", "]"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"toPythonCodeString", "[", "obj_", "]"}], ":=", 
   RowBox[{"ExportString", "[", 
    RowBox[{"obj", ",", "\"\<PythonExpression\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"toWolframCodeString", "[", "obj_", "]"}], ":=", 
    RowBox[{"ToString", "[", "obj", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"WolframPython", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", " ", "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<list\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<name\>\"", "->", "\"\<list\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"toWolframCodeString", "[", "LISTEXAMPLE", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"toPythonCodeString", "[", "LISTEXAMPLE", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<list\>\""}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<name\>\"", "->", "\"\<list append\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"\"\<l=\>\"", "<>", 
         RowBox[{"toWolframCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<; AppendTo[l,2]; l\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"\"\<l=\>\"", "<>", 
         RowBox[{"toPythonCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<; l.append(2); l\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<list\>\""}], ",", " ", 
       RowBox[{"\"\<name\>\"", "->", "\"\<list slicing\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{
         RowBox[{"toWolframCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<[[1;;;;2]]\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{
         RowBox[{"toPythonCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<[0::2]\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<note\>\"", "->", "\"\<\>\""}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<list\>\""}], ",", " ", 
       RowBox[{"\"\<name\>\"", "->", "\"\<list length\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"\"\<Length[\>\"", "<>", 
         RowBox[{"toWolframCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<]\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"\"\<len(\>\"", "<>", 
         RowBox[{"toPythonCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<general\>\""}], ",", 
       RowBox[{"\"\<name\>\"", "->", "\"\<range\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", "\"\<Range[0,7,2]\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", "\"\<range(0,7,2)\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<list\>\""}], ",", " ", 
       RowBox[{"\"\<name\>\"", "->", "\"\<list zip\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"\"\<Transpose@{\>\"", "<>", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"toWolframCodeString", "[", "KEYSEXAMPLE", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<a\>\"", "->", "\"\<\\\"a\\\"\>\""}], ",", 
             RowBox[{"\"\<b\>\"", "->", "\"\<\\\"b\\\"\>\""}], ",", 
             RowBox[{"\"\<c\>\"", "->", "\"\<\\\"c\\\"\>\""}]}], "}"}]}], 
          "]"}], "<>", "\"\<,\>\"", "<>", 
         RowBox[{"toWolframCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<}\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"\"\<list(zip(\>\"", "<>", 
         RowBox[{"toPythonCodeString", "[", 
          RowBox[{"ToString", "/@", "KEYSEXAMPLE"}], "]"}], "<>", "\"\<,\>\"",
          "<>", 
         RowBox[{"toPythonCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<))\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<dict\>\""}], ",", " ", 
       RowBox[{"\"\<name\>\"", "->", "\"\<dict\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"StringReplace", "[", 
         RowBox[{
          RowBox[{"toWolframCodeString", "[", "DICTEXAMPLE", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<a\>\"", "->", "\"\<\\\"a\\\"\>\""}], ",", 
            RowBox[{"\"\<b\>\"", "->", "\"\<\\\"b\\\"\>\""}], ",", 
            RowBox[{"\"\<c\>\"", "->", "\"\<\\\"c\\\"\>\""}]}], "}"}]}], 
         "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"toPythonCodeString", "[", 
         RowBox[{"KeyMap", "[", 
          RowBox[{"ToString", ",", " ", "DICTEXAMPLE"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<dict\>\""}], ",", " ", 
       RowBox[{"\"\<name\>\"", "->", "\"\<dict access\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"toWolframCodeString", "[", "DICTEXAMPLE", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<a\>\"", "->", "\"\<\\\"a\\\"\>\""}], ",", 
             RowBox[{"\"\<b\>\"", "->", "\"\<\\\"b\\\"\>\""}], ",", 
             RowBox[{"\"\<c\>\"", "->", "\"\<\\\"c\\\"\>\""}]}], "}"}]}], 
          "]"}], "<>", "\"\<[\\\"a\\\"]\>\""}]}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{
         RowBox[{"toPythonCodeString", "[", 
          RowBox[{"KeyMap", "[", 
           RowBox[{"ToString", ",", " ", "DICTEXAMPLE"}], "]"}], "]"}], "<>", 
         "\"\<[\\\"a\\\"]\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<functional programming\>\""}], ",", 
       RowBox[{"\"\<name\>\"", "->", "\"\<map\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"\"\<Function[x,\>\"", "<>", 
         RowBox[{"ToString", "[", 
          RowBox[{"f", "[", "x", "]"}], "]"}], "<>", "\"\<]/@\>\"", "<>", 
         RowBox[{"toWolframCodeString", "[", "LISTEXAMPLE", "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"\"\<map(lambda x : \>\"", "<>", 
         RowBox[{"ToString", "[", 
          RowBox[{"f", "[", "x", "]"}], "]"}], "<>", "\"\<, \>\"", "<>", 
         RowBox[{"toPythonCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<string\>\""}], ",", 
       RowBox[{"\"\<name\>\"", "->", "\"\<string join\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"\"\<StringRiffle[\>\"", "<>", 
         RowBox[{"toWolframCodeString", "[", 
          RowBox[{"(", 
           RowBox[{"ToString", "/@", "LISTEXAMPLE"}], ")"}], "]"}], "<>", 
         "\"\<, \\\" \\\"]\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"\"\<' '.join(\>\"", "<>", 
         RowBox[{"toPythonCodeString", "[", 
          RowBox[{"(", 
           RowBox[{"ToString", "/@", "LISTEXAMPLE"}], ")"}], "]"}], "<>", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<general\>\""}], ",", 
       RowBox[{"\"\<name\>\"", "->", "\"\<func\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"FUNCEXAMPLEWolf", "<>", "\"\<;f[2]\>\""}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"FUNCEXAMPLEPython", "<>", "\"\<\\nf(2)\>\""}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "False"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<general\>\""}], ",", 
       RowBox[{"\"\<name\>\"", "->", "\"\<global\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<wolfram_code\>\"", "->", "\"\<Names[\\\"Global`*\\\"]\>\""}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", "\"\<globals()\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "False"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<functional programming\>\""}], ",", 
       RowBox[{"\"\<name\>\"", "->", "\"\<func nest\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", "\"\<NestList[f[#]&,2,3]\>\""}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
       "\"\<python_code\>\"", "->", 
        "\"\<def nest(f, x, times):\n    y = [x]\n    for i in \
range(times-1):\n        y.append(f(y[-1]))\n    return y\nnest(f,2,3)\>\""}],
        ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "False"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<general\>\""}], ",", 
       RowBox[{"\"\<name\>\"", "->", "\"\<print\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"\"\<Print[\>\"", "<>", 
         RowBox[{"toWolframCodeString", "[", "STRINGEXAMPLEWOLF", "]"}], 
         "<>", "\"\<]\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"\"\<print(\>\"", "<>", 
         RowBox[{"toPythonCodeString", "[", "STRINGEXAMPLEPY", "]"}], "<>", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "False"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<procedural programming\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<name\>\"", "->", "\"\<if\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<wolfram_code\>\"", "->", "\"\<If[3>2,Print[\\\"true\\\"]]\>\""}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
       "\"\<python_code\>\"", "->", 
        "\"\<if 3 > 2:\n\tprint(\\\"true\\\")\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "False"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<string\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<name\>\"", "->", "\"\<string format\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<wolfram_code\>\"", "->", 
        "\"\<StringForm[\\\"The values are x=`` and y=``.\\\", 5, 10]\>\""}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
       "\"\<python_code\>\"", "->", 
        "\"\<\\\"The values are x={} and y={}.\\\".format(5, 10)\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<cat\>\"", "->", "\"\<list\>\""}], ",", " ", 
       RowBox[{"\"\<name\>\"", "->", "\"\<unique list\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<wolfram_code\>\"", "->", 
        RowBox[{"\"\<DeleteDuplicates[\>\"", "<>", 
         RowBox[{"toWolframCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<]\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<python_code\>\"", "->", 
        RowBox[{"\"\<set(\>\"", "<>", 
         RowBox[{"toPythonCodeString", "[", "LISTEXAMPLE", "]"}], "<>", 
         "\"\<)\>\""}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<evaluate\>\"", "->", "True"}]}], "\[IndentingNewLine]", 
      "|>"}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"WolframPythonds", "=", 
   RowBox[{"Dataset", "[", "WolframPython", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"WolframPythonds", "=", 
   RowBox[{"WolframPythonds", "[", 
    RowBox[{"SortBy", "[", 
     RowBox[{"#cat", "&"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"displayDataSet", "[", "ds_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"val", ",", "key"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"val", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Values", "[", "ds", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"key", "=", 
       RowBox[{
        RowBox[{"Normal", "[", 
         RowBox[{"Keys", "[", "ds", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"val", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ToString", "/@", "#"}], "&"}], ",", "val"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"PrependTo", "[", " ", 
       RowBox[{"val", ",", "key"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Grid", "[", 
       RowBox[{"val", ",", 
        RowBox[{"Frame", "->", "All"}], ",", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"None", ",", 
           RowBox[{"{", "LightGray", "}"}]}], "}"}]}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"displayDataSet", "[", "WolframPythonds", "]"}]}], "Input",
 CellChangeTimes->{{3.866738725894555*^9, 3.866738728244884*^9}, {
  3.866893617265931*^9, 3.866893620943676*^9}, {3.8682936508841467`*^9, 
  3.868293732879342*^9}, {3.868294597858313*^9, 3.86829461233694*^9}, {
  3.868294650934929*^9, 3.868294682234604*^9}, {3.868297814296417*^9, 
  3.868297841252627*^9}, {3.868298102937937*^9, 3.8682981149536533`*^9}},
 CellLabel->
  "In[377]:=",ExpressionUUID->"253888d4-2f88-4105-ad37-80c285c2b5ef"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"cat\"\>", "\<\"name\"\>", "\<\"wolfram_code\"\>", \
"\<\"python_code\"\>", "\<\"evaluate\"\>", ""},
    {"\<\"dict\"\>", "\<\"dict\"\>", "\<\"<|\\\"a\\\" -> 2, \\\"b\\\" -> 2, \
\\\"c\\\" -> 6|>\"\>", "\<\"{\\\"a\\\": 2, \\\"b\\\": 2, \\\"c\\\": 6}\"\>", \
"\<\"True\"\>", ""},
    {"\<\"dict\"\>", "\<\"dict access\"\>", "\<\"<|\\\"a\\\" -> 2, \\\"b\\\" \
-> 2, \\\"c\\\" -> 6|>[\\\"a\\\"]\"\>", "\<\"{\\\"a\\\": 2, \\\"b\\\": 2, \
\\\"c\\\": 6}[\\\"a\\\"]\"\>", "\<\"True\"\>", ""},
    {"\<\"functional programming\"\>", "\<\"func nest\"\>", \
"\<\"NestList[f[#]&,2,3]\"\>", "\<\"def nest(f, x, times):\\n    y = [x]\\n   \
 for i in range(times-1):\\n        y.append(f(y[-1]))\\n    return \
y\\nnest(f,2,3)\"\>", "\<\"False\"\>", ""},
    {"\<\"functional programming\"\>", "\<\"map\"\>", "\<\"Function[x,2 + \
x]/@{2, 2, 6}\"\>", "\<\"map(lambda x : 2 + x, [2, 2, 6])\"\>", \
"\<\"True\"\>", ""},
    {"\<\"general\"\>", "\<\"func\"\>", "\<\"f[x_]:=2 + x;f[2]\"\>", "\<\"def \
f(x):\\n\\treturn 2 + x\\nf(2)\"\>", "\<\"False\"\>", ""},
    {"\<\"general\"\>", "\<\"global\"\>", "\<\"Names[\\\"Global`*\\\"]\"\>", \
"\<\"globals()\"\>", "\<\"False\"\>", ""},
    {"\<\"general\"\>", "\<\"print\"\>", "\<\"Print[\\\"Hello \
world\\\"]\"\>", "\<\"print(\\\"Hello world\\\")\"\>", "\<\"False\"\>", ""},
    {"\<\"general\"\>", "\<\"range\"\>", "\<\"Range[0,7,2]\"\>", \
"\<\"range(0,7,2)\"\>", "\<\"True\"\>", ""},
    {"\<\"list\"\>", "\<\"list\"\>", "\<\"{2, 2, 6}\"\>", "\<\"[2, 2, \
6]\"\>", "\<\"True\"\>", ""},
    {"\<\"list\"\>", "\<\"list append\"\>", "\<\"l={2, 2, 6}; AppendTo[l,2]; \
l\"\>", "\<\"l=[2, 2, 6]; l.append(2); l\"\>", "\<\"True\"\>", ""},
    {"\<\"list\"\>", "\<\"list length\"\>", "\<\"Length[{2, 2, 6}]\"\>", \
"\<\"len([2, 2, 6])\"\>", "\<\"True\"\>", ""},
    {"\<\"list\"\>", "\<\"list slicing\"\>", "\<\"{2, 2, 6}[[1;;;;2]]\"\>", "\
\<\"[2, 2, 6][0::2]\"\>", "\<\"True\"\>", "\<\"\"\>"},
    {"\<\"list\"\>", "\<\"list zip\"\>", "\<\"Transpose@{{\\\"a\\\", \
\\\"b\\\", \\\"c\\\"},{2, 2, 6}}\"\>", "\<\"list(zip([\\\"a\\\", \\\"b\\\", \
\\\"c\\\"],[2, 2, 6]))\"\>", "\<\"True\"\>", ""},
    {"\<\"list\"\>", "\<\"unique list\"\>", "\<\"DeleteDuplicates[{2, 2, \
6}]\"\>", "\<\"set([2, 2, 6])\"\>", "\<\"True\"\>", ""},
    {"\<\"procedural programming\"\>", "\<\"if\"\>", \
"\<\"If[3>2,Print[\\\"true\\\"]]\"\>", "\<\"if 3 > \
2:\\n\\tprint(\\\"true\\\")\"\>", "\<\"False\"\>", ""},
    {"\<\"string\"\>", "\<\"string format\"\>", "\<\"StringForm[\\\"The \
values are x=`` and y=``.\\\", 5, 10]\"\>", "\<\"\\\"The values are x={} and \
y={}.\\\".format(5, 10)\"\>", "\<\"True\"\>", ""},
    {"\<\"string\"\>", "\<\"string join\"\>", "\<\"StringRiffle[{2, 2, 6}, \\\
\" \\\"]\"\>", "\<\"' '.join([\\\"2\\\", \\\"2\\\", \\\"6\\\"])\"\>", \
"\<\"True\"\>", ""}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       GrayLevel[0.85]}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.8666789576900673`*^9, 3.866678972607914*^9}, 
   3.8666859053437767`*^9, {3.866686113228451*^9, 3.866686124541204*^9}, {
   3.866716105961341*^9, 3.866716167220703*^9}, 3.866716302121482*^9, {
   3.8667165584319067`*^9, 3.8667165611765947`*^9}, 3.8667175348662558`*^9, 
   3.8667273618559647`*^9, {3.86672787153098*^9, 3.866727883716407*^9}, {
   3.866727940519601*^9, 3.866727991138129*^9}, {3.866728021551222*^9, 
   3.866728042227618*^9}, 3.866728082680417*^9, 3.8667292147621202`*^9, 
   3.866737211872665*^9, 3.8667374424023027`*^9, 3.866738738697023*^9, 
   3.8667388614237556`*^9, {3.866738914058412*^9, 3.866738926952024*^9}, {
   3.866739081888393*^9, 3.866739102208929*^9}, 3.866739163478297*^9, 
   3.86673929822786*^9, 3.866739355828905*^9, {3.866739387920455*^9, 
   3.866739403278426*^9}, 3.8667395452307587`*^9, 3.8667395834855022`*^9, 
   3.866739837641396*^9, 3.866739898922359*^9, 3.86673998307308*^9, 
   3.866740063000019*^9, 3.866740210074808*^9, 3.8667402787093697`*^9, 
   3.866740322244039*^9, 3.866740678146453*^9, 3.866740911999671*^9, {
   3.866744010956524*^9, 3.866744051868802*^9}, {3.866744105435288*^9, 
   3.866744164544999*^9}, 3.866744220816464*^9, {3.86674550256446*^9, 
   3.866745521664764*^9}, 3.866745612241416*^9, 3.866745806626782*^9, 
   3.8667458477216587`*^9, 3.8667460750114927`*^9, {3.866746504465324*^9, 
   3.866746522397978*^9}, {3.8667467131796494`*^9, 3.866746720594955*^9}, 
   3.866746820617982*^9, 3.866752937904421*^9, 3.866828408890946*^9, {
   3.866830270502483*^9, 3.866830276511998*^9}, 3.86683047610892*^9, 
   3.866830634857646*^9, {3.86683071533888*^9, 3.866830742679173*^9}, {
   3.866893607192707*^9, 3.866893621857109*^9}, 3.8679440199501123`*^9, 
   3.868293736671027*^9, {3.868294601719515*^9, 3.86829461284774*^9}, {
   3.868294653551857*^9, 3.868294682798473*^9}, {3.8682981062940807`*^9, 
   3.868298115362872*^9}},
 CellLabel->
  "Out[393]=",ExpressionUUID->"88473c93-1a63-4c5a-8219-bd298772c830"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["WolframPythonds"], "Input",
 CellLabel->
  "In[394]:=",ExpressionUUID->"268ae34f-a59d-4266-8191-51a56c467b93"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "cat" -> "dict", "name" -> "dict", "wolfram_code" -> 
        "<|\"a\" -> 2, \"b\" -> 2, \"c\" -> 6|>", "python_code" -> 
        "{\"a\": 2, \"b\": 2, \"c\": 6}", "evaluate" -> True|>, <|
       "cat" -> "dict", "name" -> "dict access", "wolfram_code" -> 
        "<|\"a\" -> 2, \"b\" -> 2, \"c\" -> 6|>[\"a\"]", "python_code" -> 
        "{\"a\": 2, \"b\": 2, \"c\": 6}[\"a\"]", "evaluate" -> True|>, <|
       "cat" -> "functional programming", "name" -> "func nest", 
        "wolfram_code" -> "NestList[f[#]&,2,3]", "python_code" -> 
        "def nest(f, x, times):\n    y = [x]\n    for i in range(times-1):\n  \
      y.append(f(y[-1]))\n    return y\nnest(f,2,3)", "evaluate" -> False|>, <|
       "cat" -> "functional programming", "name" -> "map", "wolfram_code" -> 
        "Function[x,2 + x]/@{2, 2, 6}", "python_code" -> 
        "map(lambda x : 2 + x, [2, 2, 6])", "evaluate" -> True|>, <|
       "cat" -> "general", "name" -> "func", "wolfram_code" -> 
        "f[x_]:=2 + x;f[2]", "python_code" -> 
        "def f(x):\n\treturn 2 + x\nf(2)", "evaluate" -> False|>, <|
       "cat" -> "general", "name" -> "global", "wolfram_code" -> 
        "Names[\"Global`*\"]", "python_code" -> "globals()", "evaluate" -> 
        False|>, <|
       "cat" -> "general", "name" -> "print", "wolfram_code" -> 
        "Print[\"Hello world\"]", "python_code" -> "print(\"Hello world\")", 
        "evaluate" -> False|>, <|
       "cat" -> "general", "name" -> "range", "wolfram_code" -> 
        "Range[0,7,2]", "python_code" -> "range(0,7,2)", "evaluate" -> 
        True|>, <|
       "cat" -> "list", "name" -> "list", "wolfram_code" -> "{2, 2, 6}", 
        "python_code" -> "[2, 2, 6]", "evaluate" -> True|>, <|
       "cat" -> "list", "name" -> "list append", "wolfram_code" -> 
        "l={2, 2, 6}; AppendTo[l,2]; l", "python_code" -> 
        "l=[2, 2, 6]; l.append(2); l", "evaluate" -> True|>, <|
       "cat" -> "list", "name" -> "list length", "wolfram_code" -> 
        "Length[{2, 2, 6}]", "python_code" -> "len([2, 2, 6])", "evaluate" -> 
        True|>, <|
       "cat" -> "list", "name" -> "list slicing", "wolfram_code" -> 
        "{2, 2, 6}[[1;;;;2]]", "python_code" -> "[2, 2, 6][0::2]", "evaluate" -> 
        True, "note" -> ""|>, <|
       "cat" -> "list", "name" -> "list zip", "wolfram_code" -> 
        "Transpose@{{\"a\", \"b\", \"c\"},{2, 2, 6}}", "python_code" -> 
        "list(zip([\"a\", \"b\", \"c\"],[2, 2, 6]))", "evaluate" -> True|>, <|
       "cat" -> "list", "name" -> "unique list", "wolfram_code" -> 
        "DeleteDuplicates[{2, 2, 6}]", "python_code" -> "set([2, 2, 6])", 
        "evaluate" -> True|>, <|
       "cat" -> "procedural programming", "name" -> "if", "wolfram_code" -> 
        "If[3>2,Print[\"true\"]]", "python_code" -> 
        "if 3 > 2:\n\tprint(\"true\")", "evaluate" -> False|>, <|
       "cat" -> "string", "name" -> "string format", "wolfram_code" -> 
        "StringForm[\"The values are x=`` and y=``.\", 5, 10]", "python_code" -> 
        "\"The values are x={} and y={}.\".format(5, 10)", "evaluate" -> 
        True|>, <|
       "cat" -> "string", "name" -> "string join", "wolfram_code" -> 
        "StringRiffle[{2, 2, 6}, \" \"]", "python_code" -> 
        "' '.join([\"2\", \"2\", \"6\"])", "evaluate" -> True|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "cat"} -> 1, {All, "name"} -> 
        1, {All, "wolfram_code"} -> 1, {All, "python_code"} -> 
        1, {All, "evaluate"} -> 1, {All, "note"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "cat" -> TypeSystem`PackageScope`AtomShape[246.40000000000003`], 
            "name" -> TypeSystem`PackageScope`AtomShape[123.20000000000002`], 
            "wolfram_code" -> 
            TypeSystem`PackageScope`AtomShape[414.40000000000003`], 
            "python_code" -> 
            TypeSystem`PackageScope`AtomShape[403.20000000000005`], 
            "evaluate" -> TypeSystem`PackageScope`AtomShape[36], "note" -> 
            TypeSystem`PackageScope`AtomShape[33.6]|>], 
          DirectedInfinity[1], 6, {All}]], 17, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "cat", "name", "wolfram_code", "python_code", "evaluate", "note"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Atom[String]}], 17], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "cat"} -> 1, {All, "name"} -> 
        1, {All, "wolfram_code"} -> 1, {All, "python_code"} -> 
        1, {All, "evaluate"} -> 1, {All, "note"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "cat" -> TypeSystem`PackageScope`AtomShape[246.40000000000003`], 
            "name" -> TypeSystem`PackageScope`AtomShape[123.20000000000002`], 
            "wolfram_code" -> 
            TypeSystem`PackageScope`AtomShape[414.40000000000003`], 
            "python_code" -> 
            TypeSystem`PackageScope`AtomShape[403.20000000000005`], 
            "evaluate" -> TypeSystem`PackageScope`AtomShape[36], "note" -> 
            TypeSystem`PackageScope`AtomShape[33.6]|>], 
          DirectedInfinity[1], 6, {All}]], 17, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "cat", "name", "wolfram_code", "python_code", "evaluate", "note"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Atom[String]}], 17], "Path" -> {}, "DisplayedRowCount" -> 
     17, "DisplayedColumnCount" -> 6, "DataRowCount" -> 17, "DataColumnCount" -> 
     6, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cat", 
                  Style[
                  "cat", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "cat"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "cat"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["wolfram_code", 
                  Style[
                  "wolfram_code", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "wolfram_code"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "wolfram_code"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["python_code", 
                  Style[
                  "python_code", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "python_code"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "python_code"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["evaluate", 
                  Style[
                  "evaluate", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "evaluate"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "evaluate"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["note", 
                  Style[
                  "note", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "note"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "note"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["dict", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["dict", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["<|\"a\" -> 2, \"b\" -> 2, \"c\" -> 6|>", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["{\"a\": 2, \"b\": 2, \"c\": 6}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["dict", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["dict access", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["<|\"a\" -> 2, \"b\" -> 2, \"c\" -> 6|>[\"a\"]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["{\"a\": 2, \"b\": 2, \"c\": 6}[\"a\"]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["functional programming", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["func nest", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["NestList[f[#]&,2,3]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "def nest(f, x, times):\n    y = [x]\n    for i in \
range(times-1): \[DescendingEllipsis]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["functional programming", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["map", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Function[x,2 + x]/@{2, 2, 6}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["map(lambda x : 2 + x, [2, 2, 6])", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["general", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["func", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["f[x_]:=2 + x;f[2]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["def f(x):\n\treturn 2 + x\nf(2)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["general", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["global", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Names[\"Global`*\"]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["globals()", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["general", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["print", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Print[\"Hello world\"]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["print(\"Hello world\")", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["general", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["range", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Range[0,7,2]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["range(0,7,2)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["{2, 2, 6}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["[2, 2, 6]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["list append", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["l={2, 2, 6}; AppendTo[l,2]; l", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["l=[2, 2, 6]; l.append(2); l", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["list length", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Length[{2, 2, 6}]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["len([2, 2, 6])", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["list slicing", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["{2, 2, 6}[[1;;;;2]]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["[2, 2, 6][0::2]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["note"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["list zip", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Transpose@{{\"a\", \"b\", \"c\"},{2, 2, 6}}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["list(zip([\"a\", \"b\", \"c\"],[2, 2, 6]))", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["unique list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DeleteDuplicates[{2, 2, 6}]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["set([2, 2, 6])", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["procedural programming", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["if", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["If[3>2,Print[\"true\"]]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["if 3 > 2:\n\tprint(\"true\")", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["False"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["string", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["string format", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "StringForm[\"The values are x=`` and y=``.\", 5, 10]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["\"The values are x={} and y={}.\".format(5, 10)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["string", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["cat"]}, "Item", False], "Mouse"], 
              ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["string join", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["StringRiffle[{2, 2, 6}, \" \"]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["' '.join([\"2\", \"2\", \"6\"])", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["evaluate"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Style["\[LongDash]", 
               GrayLevel[0.75]], ImageMargins -> {{5, 3}, {4, 5}}], 
             Alignment -> {Left, Baseline}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1324., {304.634033203125, 310.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1324., {304.634033203125, 310.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.866739211196764*^9, 3.866739301657202*^9, 
  3.866739358885828*^9, 3.866739408646627*^9, 3.866739586667851*^9, 
  3.8667398428075333`*^9, 3.866740067477322*^9, 3.866740212698908*^9, 
  3.866740921592371*^9, 3.866744030095685*^9, 3.866744062300191*^9, 
  3.8667442253925257`*^9, 3.866745526040436*^9, 3.86674561515934*^9, 
  3.86674580939155*^9, 3.8667458530462923`*^9, 3.866746085679823*^9, 
  3.8667465255871983`*^9, 3.86675294053824*^9, 3.8668304794866467`*^9, 
  3.866830644853697*^9, 3.866893640916827*^9, 3.86794402014859*^9, 
  3.868293750544302*^9, 3.868294618210155*^9, 3.868298120317174*^9},
 CellLabel->
  "Out[394]=",ExpressionUUID->"c173efcc-e530-404c-84cf-5ec078bcd08e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Run Tests", "Section",
 CellChangeTimes->{{3.8667259047766542`*^9, 3.8667259132120256`*^9}, {
  3.866726049263155*^9, 
  3.866726064056417*^9}},ExpressionUUID->"7f941233-b9db-4632-9cf8-\
8495c18bb28c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"myStyle", "[", "str_", "]"}], ":=", 
   RowBox[{"Style", "[", 
    RowBox[{"str", ",", 
     RowBox[{"FontFamily", "->", "\"\<Bitstream Vera Sans Mono\>\""}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RunWolfram", "[", "code_", "]"}], ":=", 
   RowBox[{"ToExpression", "[", "code", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PYTHONIMPORT", "=", "\"\<import numpy as np;\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RunPython", "[", "code_", "]"}], ":=", 
    RowBox[{"ExternalEvaluate", "[", 
     RowBox[{"\"\<Python\>\"", ",", 
      RowBox[{"PYTHONIMPORT", "<>", "code"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Wolfram\>\"", ",", "\"\<Python\>\"", ",", "\"\<Outpur Wolfram\>\"",
        ",", "\"\<Outpur Python\>\"", ",", "\"\< \>\""}], "}"}], "}"}], "~", 
    "Join", "~", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"myStyle", "@", 
         RowBox[{
          RowBox[{"Normal", "[", 
           RowBox[{
            RowBox[{"WolframPythonds", "[", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"#name", "==", "NAME"}], "&"}], "]"}], "]"}], "[", 
            RowBox[{"All", ",", "\"\<wolfram_code\>\""}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"myStyle", "@", 
         RowBox[{
          RowBox[{"Normal", "[", 
           RowBox[{
            RowBox[{"WolframPythonds", "[", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"#name", "==", "NAME"}], "&"}], "]"}], "]"}], "[", 
            RowBox[{"All", ",", "\"\<python_code\>\""}], "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"myStyle", "@", 
         RowBox[{"RunWolfram", "[", 
          RowBox[{
           RowBox[{"Normal", "[", 
            RowBox[{
             RowBox[{"WolframPythonds", "[", 
              RowBox[{"Select", "[", 
               RowBox[{
                RowBox[{"#name", "==", "NAME"}], "&"}], "]"}], "]"}], "[", 
             RowBox[{"All", ",", "\"\<wolfram_code\>\""}], "]"}], "]"}], "[", 
           
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"myStyle", "@", 
         RowBox[{"RunPython", "[", 
          RowBox[{
           RowBox[{"Normal", "[", 
            RowBox[{
             RowBox[{"WolframPythonds", "[", 
              RowBox[{"Select", "[", 
               RowBox[{
                RowBox[{"#name", "==", "NAME"}], "&"}], "]"}], "]"}], "[", 
             RowBox[{"All", ",", "\"\<python_code\>\""}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RunWolfram", "[", 
          RowBox[{
           RowBox[{"Normal", "[", 
            RowBox[{
             RowBox[{"WolframPythonds", "[", 
              RowBox[{"Select", "[", 
               RowBox[{
                RowBox[{"#name", "==", "NAME"}], "&"}], "]"}], "]"}], "[", 
             RowBox[{"All", ",", "\"\<wolfram_code\>\""}], "]"}], "]"}], "[", 
           
           RowBox[{"[", "1", "]"}], "]"}], "]"}], "==", 
         RowBox[{"RunPython", "[", 
          RowBox[{
           RowBox[{"Normal", "[", 
            RowBox[{
             RowBox[{"WolframPythonds", "[", 
              RowBox[{"Select", "[", 
               RowBox[{
                RowBox[{"#name", "==", "NAME"}], "&"}], "]"}], "]"}], "[", 
             RowBox[{"All", ",", "\"\<python_code\>\""}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"NAME", ",", 
        RowBox[{"Normal", "[", 
         RowBox[{
          RowBox[{"WolframPythonds", "[", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"#evaluate", "==", "True"}], "&"}], "]"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<name\>\""}], "]"}], "]"}], "]"}]}], 
       "}"}]}], "\[IndentingNewLine]", "]"}]}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}], ",", 
   RowBox[{"Background", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", "LightGray", "}"}]}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8667381152098513`*^9, 3.8667381221632357`*^9}, {
   3.866738158343855*^9, 3.8667381601207867`*^9}, 3.8667391083501883`*^9, {
   3.866746647581976*^9, 3.866746661317824*^9}},
 CellLabel->
  "In[395]:=",ExpressionUUID->"9b3ac6b0-cbf3-45b5-97f4-7d104769edd5"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Wolfram\"\>", "\<\"Python\"\>", "\<\"Outpur Wolfram\"\>", \
"\<\"Outpur Python\"\>", "\<\" \"\>"},
    {
     StyleBox["\<\"<|\\\"a\\\" -> 2, \\\"b\\\" -> 2, \\\"c\\\" -> 6|>\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"{\\\"a\\\": 2, \\\"b\\\": 2, \\\"c\\\": 6}\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"a\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"b\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"c\"\>", "\[Rule]", "6"}]}], "\[RightAssociation]"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"a\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"b\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"c\"\>", "\[Rule]", "6"}]}], "\[RightAssociation]"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"<|\\\"a\\\" -> 2, \\\"b\\\" -> 2, \\\"c\\\" -> 6|>[\\\"a\\\
\"]\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"{\\\"a\\\": 2, \\\"b\\\": 2, \\\"c\\\": 6}[\\\"a\\\"]\"\>",
      
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["2",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["2",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"Function[x,2 + x]/@{2, 2, 6}\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"map(lambda x : 2 + x, [2, 2, 6])\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"4", ",", "4", ",", "8"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"4", ",", "4", ",", "8"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"Range[0,7,2]\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"range(0,7,2)\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"0", ",", "2", ",", "4", ",", "6"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"0", ",", "2", ",", "4", ",", "6"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"{2, 2, 6}\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"[2, 2, 6]\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"2", ",", "2", ",", "6"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"2", ",", "2", ",", "6"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"l={2, 2, 6}; AppendTo[l,2]; l\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"l=[2, 2, 6]; l.append(2); l\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"2", ",", "2", ",", "6", ",", "2"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"2", ",", "2", ",", "6", ",", "2"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"Length[{2, 2, 6}]\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"len([2, 2, 6])\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["3",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["3",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"{2, 2, 6}[[1;;;;2]]\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"[2, 2, 6][0::2]\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"2", ",", "6"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"2", ",", "6"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"Transpose@{{\\\"a\\\", \\\"b\\\", \\\"c\\\"},{2, 2, \
6}}\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"list(zip([\\\"a\\\", \\\"b\\\", \\\"c\\\"],[2, 2, 6]))\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\<\"a\"\>", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"b\"\>", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"c\"\>", ",", "6"}], "}"}]}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\<\"a\"\>", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"b\"\>", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\<\"c\"\>", ",", "6"}], "}"}]}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"DeleteDuplicates[{2, 2, 6}]\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"set([2, 2, 6])\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"2", ",", "6"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{"2", ",", "6"}], "}"}],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"},
    {
     StyleBox["\<\"StringForm[\\\"The values are x=`` and y=``.\\\", 5, 10]\"\
\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"\\\"The values are x={} and y={}.\\\".format(5, 10)\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox[
      InterpretationBox["\<\"The values are x=\\!\\(\\*RowBox[{\\\"5\\\"}]\\) \
and y=\\!\\(\\*RowBox[{\\\"10\\\"}]\\).\"\>",
       StringForm["The values are x=`` and y=``.", 5, 10],
       Editable->False],
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"The values are x=5 and y=10.\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     RowBox[{
      InterpretationBox["\<\"The values are x=\\!\\(\\*RowBox[{\\\"5\\\"}]\\) \
and y=\\!\\(\\*RowBox[{\\\"10\\\"}]\\).\"\>",
       StringForm["The values are x=`` and y=``.", 5, 10],
       Editable->False], "\[Equal]", "\<\"The values are x=5 and y=10.\"\>"}]}
     ,
    {
     StyleBox["\<\"StringRiffle[{2, 2, 6}, \\\" \\\"]\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"' '.join([\\\"2\\\", \\\"2\\\", \\\"6\\\"])\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"2 2 6\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], 
     StyleBox["\<\"2 2 6\"\>",
      StripOnInput->False,
      FontFamily->"Bitstream Vera Sans Mono"], "True"}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       GrayLevel[0.85]}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.866125592597821*^9, 3.866125624305573*^9}, 
   3.866129904531209*^9, {3.866129981166766*^9, 3.866130030828426*^9}, 
   3.866130067118972*^9, 3.866130149380085*^9, 3.8661560975472517`*^9, {
   3.866156135210473*^9, 3.866156154943059*^9}, 3.866156233004388*^9, 
   3.866156541444131*^9, 3.866156938656516*^9, 3.866217241656465*^9, 
   3.8662200603732986`*^9, 3.8666564611750793`*^9, 3.866656632858988*^9, 
   3.866656720141885*^9, 3.866656859906023*^9, 3.866673698114798*^9, 
   3.866674058406241*^9, 3.866685913978651*^9, 3.866716178321295*^9, 
   3.86671754234126*^9, 3.866726106224086*^9, 3.8667278934926853`*^9, 
   3.866727971658128*^9, {3.86672800214393*^9, 3.866728047986207*^9}, 
   3.8667289976465693`*^9, {3.8667290487198973`*^9, 3.86672907447927*^9}, 
   3.866729223363846*^9, 3.866737225506328*^9, 3.866737277580963*^9, 
   3.866737404016992*^9, {3.866737455092732*^9, 3.866737500773589*^9}, 
   3.866737973833014*^9, 3.8667380368891783`*^9, 3.8667381983366537`*^9, 
   3.866738235598702*^9, 3.8667382660572023`*^9, {3.866738332863607*^9, 
   3.866738359754327*^9}, {3.8667383927165327`*^9, 3.8667384143327513`*^9}, 
   3.8667389465752277`*^9, 3.866739119602681*^9, 3.866739181552042*^9, 
   3.866739316924135*^9, 3.86673937336726*^9, 3.8667396053540077`*^9, 
   3.8667398591379766`*^9, 3.866739917039392*^9, 3.86674008064609*^9, 
   3.8667402251464767`*^9, 3.8667402956512413`*^9, 3.8667403369908648`*^9, 
   3.866744078793652*^9, 3.86674424683593*^9, 3.866745547664261*^9, 
   3.866745630427565*^9, 3.8667457597960978`*^9, 3.8667458242666683`*^9, 
   3.8667458699076147`*^9, 3.866746542136091*^9, 3.8667466764231987`*^9, 
   3.8667467413421803`*^9, 3.866752903806933*^9, 3.8667529541058807`*^9, 
   3.8668302931513777`*^9, 3.866830499206902*^9, 3.8668936747022123`*^9, 
   3.8679440298217363`*^9, 3.86829376918182*^9, 3.86829467177814*^9, 
   3.8682981351675158`*^9},
 CellLabel->
  "Out[399]=",ExpressionUUID->"b3bf4438-a4c6-411a-8f96-9a62e43ed60a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"WolframPythonds", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"#cat", "==", "\"\<list\>\""}], "&"}], "]"}], "]"}], "[", 
  RowBox[{"All", ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<name\>\"", ",", "\"\<wolfram_code\>\"", ",", "\"\<python_code\>\""}],
     "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.866763622447475*^9, 3.86676366111427*^9}},
 CellLabel->
  "In[400]:=",ExpressionUUID->"24b16859-65e7-473d-9ab0-fd8f2fef4c84"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "name" -> "list", "wolfram_code" -> "{2, 2, 6}", "python_code" -> 
        "[2, 2, 6]"|>, <|
       "name" -> "list append", "wolfram_code" -> 
        "l={2, 2, 6}; AppendTo[l,2]; l", "python_code" -> 
        "l=[2, 2, 6]; l.append(2); l"|>, <|
       "name" -> "list length", "wolfram_code" -> "Length[{2, 2, 6}]", 
        "python_code" -> "len([2, 2, 6])"|>, <|
       "name" -> "list slicing", "wolfram_code" -> "{2, 2, 6}[[1;;;;2]]", 
        "python_code" -> "[2, 2, 6][0::2]"|>, <|
       "name" -> "list zip", "wolfram_code" -> 
        "Transpose@{{\"a\", \"b\", \"c\"},{2, 2, 6}}", "python_code" -> 
        "list(zip([\"a\", \"b\", \"c\"],[2, 2, 6]))"|>, <|
       "name" -> "unique list", "wolfram_code" -> 
        "DeleteDuplicates[{2, 2, 6}]", "python_code" -> "set([2, 2, 6])"|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "name"} -> 
        1, {All, "wolfram_code"} -> 1, {All, "python_code"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "name" -> TypeSystem`PackageScope`AtomShape[134.4], "wolfram_code" -> 
            TypeSystem`PackageScope`AtomShape[414.40000000000003`], 
            "python_code" -> 
            TypeSystem`PackageScope`AtomShape[403.20000000000005`]|>], 
          DirectedInfinity[1], 3, {All}]], 6, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"name", "wolfram_code", "python_code"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 6], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "name"} -> 
        1, {All, "wolfram_code"} -> 1, {All, "python_code"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "name" -> TypeSystem`PackageScope`AtomShape[134.4], "wolfram_code" -> 
            TypeSystem`PackageScope`AtomShape[414.40000000000003`], 
            "python_code" -> 
            TypeSystem`PackageScope`AtomShape[403.20000000000005`]|>], 
          DirectedInfinity[1], 3, {All}]], 6, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"name", "wolfram_code", "python_code"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 6], "Path" -> {}, "DisplayedRowCount" -> 
     6, "DisplayedColumnCount" -> 3, "DataRowCount" -> 6, "DataColumnCount" -> 
     3, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["wolfram_code", 
                  Style[
                  "wolfram_code", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "wolfram_code"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "wolfram_code"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["python_code", 
                  Style[
                  "python_code", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "python_code"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "python_code"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["{2, 2, 6}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["[2, 2, 6]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["list append", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["l={2, 2, 6}; AppendTo[l,2]; l", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["l=[2, 2, 6]; l.append(2); l", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["list length", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Length[{2, 2, 6}]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["len([2, 2, 6])", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["list slicing", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["{2, 2, 6}[[1;;;;2]]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["[2, 2, 6][0::2]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["list zip", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Transpose@{{\"a\", \"b\", \"c\"},{2, 2, 6}}", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["list(zip([\"a\", \"b\", \"c\"],[2, 2, 6]))", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["unique list", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DeleteDuplicates[{2, 2, 6}]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["wolfram_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["set([2, 2, 6])", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["python_code"]}, "Item", False], "Mouse"], 
              ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{980., {101.134033203125, 106.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{980., {101.134033203125, 106.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.866763643861313*^9, 3.866763661550376*^9}, 
   3.86794402996183*^9, 3.868298144151948*^9},
 CellLabel->
  "Out[400]=",ExpressionUUID->"a6228d04-f86e-4f1c-af91-ae277ad7347d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compile README.md", "Section",
 CellChangeTimes->{{3.8667259047766542`*^9, 3.8667259132120256`*^9}, {
  3.866726049263155*^9, 
  3.866726076016555*^9}},ExpressionUUID->"84f2eaf5-6b30-442b-9eae-\
43f3f097c7bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PrintBlock", "[", "nnvalds_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"str", "=", "\"\<\>\""}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"str", "=", 
       RowBox[{
       "str", "<>", "\"\< Name | Wolfram | Python\>\"", "<>", 
        "\"\<\\n\>\""}]}], ";", " ", "\[IndentingNewLine]", 
      RowBox[{"str", "=", 
       RowBox[{
       "str", "<>", "\"\<:---:|:---|:---\>\"", "<>", "\"\<\\n\>\""}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"row", "=", "1"}], ",", 
        RowBox[{"row", "<=", 
         RowBox[{"Length", "[", "nnvalds", "]"}]}], ",", 
        RowBox[{"row", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
               RowBox[{"nnvalds", "[", 
                RowBox[{"[", "row", "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}], "]"}], ">", "1"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"str", "=", 
              RowBox[{"str", "<>", 
               RowBox[{"StringJoin", "[", 
                RowBox[{"Riffle", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"nnvalds", "[", 
                    RowBox[{"[", "row", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"Riffle", "[", 
                    RowBox[{
                    RowBox[{"MyFormat", "/@", 
                    RowBox[{
                    RowBox[{"nnvalds", "[", 
                    RowBox[{"[", "row", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", ",", 
                    "\"\<<br>\>\""}], "]"}], ",", 
                    RowBox[{"MyFormat", "[", 
                    RowBox[{
                    RowBox[{"nnvalds", "[", 
                    RowBox[{"[", "row", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "}"}], ",", 
                  "\"\<|\>\""}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "[", 
                  RowBox[{"StringSplit", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"nnvalds", "[", 
                    RowBox[{"[", "row", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\"\<\\r\>\"", "|", "\"\<\\n\>\""}], ")"}], 
                    ".."}]}], "]"}], "]"}], ">", "1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{"str", "=", 
                  RowBox[{"str", "<>", 
                   RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"nnvalds", "[", 
                    RowBox[{"[", "row", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "<>", "\"\<|\>\"", "<>", 
                    RowBox[{"MyFormat", "[", 
                    RowBox[{
                    RowBox[{"nnvalds", "[", 
                    RowBox[{"[", "row", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}], "<>", "\"\<|\>\"", 
                    
                    RowBox[{"(*", 
                    RowBox[{"<>", "\"\<<pre>\>\""}], "*)"}], "<>", 
                    RowBox[{"MyFormat", "[", 
                    RowBox[{"BreakInLines", "[", 
                    RowBox[{
                    RowBox[{"nnvalds", "[", 
                    RowBox[{"[", "row", "]"}], "]"}], "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "]"}], "]"}]}], 
                    RowBox[{"(*", 
                    RowBox[{"<>", "\"\<</pre>\>\""}], "*)"}], "]"}]}]}], 
                 "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{"str", "=", 
                 RowBox[{"str", "<>", 
                  RowBox[{"StringJoin", "[", 
                   RowBox[{"Riffle", "[", 
                    RowBox[{
                    RowBox[{"MyFormatBig", "@", 
                    RowBox[{"nnvalds", "[", 
                    RowBox[{"[", "row", "]"}], "]"}]}], ",", "\"\<|\>\""}], 
                    "]"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";"}], 
             "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"row", "<", 
             RowBox[{"Length", "[", "nnvalds", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"str", "=", 
             RowBox[{"str", "<>", "\"\<\\n\>\""}]}]}], "]"}], ";"}], 
         "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "str", "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.866746147750616*^9, 3.866746197601116*^9}, {
  3.866746238689393*^9, 3.866746240939815*^9}, {3.866746303547916*^9, 
  3.866746304015799*^9}, {3.86829446303986*^9, 3.868294466529708*^9}},
 CellLabel->
  "In[401]:=",ExpressionUUID->"ed9e8cb1-7dc5-4d90-9b80-b69bf821c8cf"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"USEPRE", "=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MyFormat", "[", "str_", "]"}], ":=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{"USEPRE", ",", "\"\<<pre>\>\"", ",", "\"\<\>\""}], "]"}], 
      "<>", "\"\<<code>\>\"", "<>", " ", "str", "<>", "\"\<</code>\>\"", "<>", 
      RowBox[{"If", "[", 
       RowBox[{"USEPRE", ",", "\"\<</pre>\>\"", ",", "\"\<\>\""}], "]"}]}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<\\\\n\>\"", "->", "\"\<<br>\>\""}], ",", 
       RowBox[{"\"\<|\>\"", "->", "\"\<\\\\|\>\""}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MyFormatBig", "[", "ll_List", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ll", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"MyFormat", "[", 
      RowBox[{"ll", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
     RowBox[{"MyFormat", "[", 
      RowBox[{"ll", "[", 
       RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"BreakInLines", "[", "str_", "]"}], ":=", 
    RowBox[{"StringJoin", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "<>", "\"\<<br>\>\""}], "&"}], ",", 
       RowBox[{"StringSplit", "[", 
        RowBox[{"str", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<\\r\>\"", "|", "\"\<\\n\>\""}], ")"}], ".."}]}], 
        "]"}]}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CATEGORIES", "=", 
   RowBox[{"Union", "[", 
    RowBox[{"Normal", "[", 
     RowBox[{"WolframPythonds", "[", 
      RowBox[{"All", ",", "\"\<cat\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CATEGORIES", "=", 
   RowBox[{
    RowBox[{"{", "\"\<general\>\"", "}"}], "~", "Join", "~", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{"CATEGORIES", ",", "\"\<general\>\""}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Categories : \>\"", "<>", 
     RowBox[{"ToString", "@", "CATEGORIES"}]}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"str", "=", "\"\<\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"str", "=", 
    RowBox[{
    "str", "<>", "\"\<# Wolfram \[LeftRightArrow] Python\>\"", "<>", 
     "\"\<\\n\>\""}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"cat", "=", "1"}], ",", 
    RowBox[{"cat", "\[LessEqual]", 
     RowBox[{"Length", "@", "CATEGORIES"}]}], ",", 
    RowBox[{"cat", "++"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"str", "=", 
       RowBox[{"str", "<>", "\"\<## \>\"", "<>", 
        RowBox[{"CATEGORIES", "[", 
         RowBox[{"[", "cat", "]"}], "]"}], "<>", "\"\<\\n\>\""}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"str", "=", 
       RowBox[{"str", "<>", "\"\<---\\n\>\""}]}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"dataset", "=", 
       RowBox[{
        RowBox[{"WolframPythonds", "[", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"#cat", "==", 
            RowBox[{"CATEGORIES", "[", 
             RowBox[{"[", "cat", "]"}], "]"}]}], "&"}], "]"}], "]"}], "[", 
        RowBox[{"All", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<name\>\"", ",", "\"\<wolfram_code\>\"", ",", 
           "\"\<python_code\>\""}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nnvalds", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Values", "[", "dataset", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"str", "=", 
       RowBox[{"str", "<>", 
        RowBox[{"PrintBlock", "[", "nnvalds", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"str", "=", 
       RowBox[{"str", "<>", "\"\<\\n\\n\\n\>\""}]}], ";"}], 
     "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<Exporting : \>\"", "<>", 
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\<README.md\>\""}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<----------------\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\<README.md\>\""}], 
    ",", "str", ",", "\"\<Text\>\""}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"FilePrint", "[", 
  RowBox[{
   RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\<README.md\>\""}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.866671841949668*^9, 3.866671862908572*^9}, {
   3.866673642031835*^9, 3.866673649749412*^9}, {3.8666781099869003`*^9, 
   3.866678112014697*^9}, {3.8666782013418407`*^9, 3.866678398448596*^9}, {
   3.866685636810645*^9, 3.866685664863895*^9}, {3.866685727082481*^9, 
   3.8666857381159143`*^9}, {3.866685788947956*^9, 3.8666857909822073`*^9}, 
   3.866685822896237*^9, {3.866686011108438*^9, 3.8666860407035427`*^9}, {
   3.8666861941443663`*^9, 3.866686197428796*^9}, {3.866716256029249*^9, 
   3.866716276611782*^9}, {3.866716712048409*^9, 3.866716721412058*^9}, {
   3.866716825136207*^9, 3.8667169515778627`*^9}, {3.866716982964267*^9, 
   3.866717038595416*^9}, {3.8667170736777773`*^9, 3.866717079694339*^9}, {
   3.866717113152059*^9, 3.8667171409825783`*^9}, {3.866717196743033*^9, 
   3.866717197796144*^9}, {3.8667172953502293`*^9, 3.866717299499547*^9}, {
   3.866717581655904*^9, 3.866717584738261*^9}, {3.866726497936294*^9, 
   3.866726504641294*^9}, 3.866746205989717*^9, {3.86674625159165*^9, 
   3.866746288990143*^9}, {3.8667463385602703`*^9, 3.866746369955958*^9}, {
   3.866763510237545*^9, 3.866763553144065*^9}, {3.866763595253683*^9, 
   3.866763605997045*^9}, {3.866763671419257*^9, 3.8667637185126266`*^9}, {
   3.866763752827881*^9, 3.866763757507208*^9}, {3.8667638130097313`*^9, 
   3.866763813276449*^9}, {3.8667638732650213`*^9, 3.866763874973322*^9}, {
   3.866763950531602*^9, 3.86676396308504*^9}, {3.866893899785942*^9, 
   3.866893901145426*^9}, {3.868294163700576*^9, 3.8682941737240553`*^9}, {
   3.868294227577815*^9, 3.8682942335685167`*^9}, {3.868294359304368*^9, 
   3.868294432141037*^9}},
 CellLabel->
  "In[402]:=",ExpressionUUID->"8f5a5061-141d-429b-8061-e4325b1d7030"],

Cell[CellGroupData[{

Cell[BoxData["\<\"Categories : {general, dict, functional programming, list, \
procedural programming, string}\"\>"], "Print",
 CellChangeTimes->{
  3.866717042140605*^9, 3.866717080137032*^9, {3.866717127698897*^9, 
   3.866717142974844*^9}, 3.8667171991059437`*^9, 3.866717306639189*^9, {
   3.866717582268354*^9, 3.866717585084917*^9}, 3.86672650627569*^9, 
   3.866737527590876*^9, 3.866739939594399*^9, 3.866745888001306*^9, {
   3.866746291412662*^9, 3.8667463068648767`*^9}, 3.866746375681501*^9, 
   3.86676372121944*^9, 3.866763757940673*^9, 3.866763818507144*^9, 
   3.86676387822163*^9, 3.866763964001481*^9, 3.866830656028542*^9, 
   3.866830746902442*^9, 3.8668937328674717`*^9, 3.866893911579048*^9, 
   3.867944030099721*^9, 3.8682937899758997`*^9, 3.868294176227726*^9, 
   3.868294234714136*^9, 3.868294433221415*^9, 3.868294469487859*^9, 
   3.868298149973072*^9},
 CellLabel->
  "During evaluation of \
In[402]:=",ExpressionUUID->"e741ba8d-cc41-474c-a085-4645224ca54f"],

Cell[BoxData["\<\"Exporting : \
/Users/landajuelala1/Work/GitHub/wolfram2python/README.md\"\>"], "Print",
 CellChangeTimes->{
  3.866717042140605*^9, 3.866717080137032*^9, {3.866717127698897*^9, 
   3.866717142974844*^9}, 3.8667171991059437`*^9, 3.866717306639189*^9, {
   3.866717582268354*^9, 3.866717585084917*^9}, 3.86672650627569*^9, 
   3.866737527590876*^9, 3.866739939594399*^9, 3.866745888001306*^9, {
   3.866746291412662*^9, 3.8667463068648767`*^9}, 3.866746375681501*^9, 
   3.86676372121944*^9, 3.866763757940673*^9, 3.866763818507144*^9, 
   3.86676387822163*^9, 3.866763964001481*^9, 3.866830656028542*^9, 
   3.866830746902442*^9, 3.8668937328674717`*^9, 3.866893911579048*^9, 
   3.867944030099721*^9, 3.8682937899758997`*^9, 3.868294176227726*^9, 
   3.868294234714136*^9, 3.868294433221415*^9, 3.868294469487859*^9, 
   3.8682981500273848`*^9},
 CellLabel->
  "During evaluation of \
In[402]:=",ExpressionUUID->"411d4ef3-cf00-4a0c-a719-63a4fb237d5b"],

Cell[BoxData["\<\"----------------\"\>"], "Print",
 CellChangeTimes->{
  3.866717042140605*^9, 3.866717080137032*^9, {3.866717127698897*^9, 
   3.866717142974844*^9}, 3.8667171991059437`*^9, 3.866717306639189*^9, {
   3.866717582268354*^9, 3.866717585084917*^9}, 3.86672650627569*^9, 
   3.866737527590876*^9, 3.866739939594399*^9, 3.866745888001306*^9, {
   3.866746291412662*^9, 3.8667463068648767`*^9}, 3.866746375681501*^9, 
   3.86676372121944*^9, 3.866763757940673*^9, 3.866763818507144*^9, 
   3.86676387822163*^9, 3.866763964001481*^9, 3.866830656028542*^9, 
   3.866830746902442*^9, 3.8668937328674717`*^9, 3.866893911579048*^9, 
   3.867944030099721*^9, 3.8682937899758997`*^9, 3.868294176227726*^9, 
   3.868294234714136*^9, 3.868294433221415*^9, 3.868294469487859*^9, 
   3.868298150040681*^9},
 CellLabel->
  "During evaluation of \
In[402]:=",ExpressionUUID->"ce821f03-16ed-4bd9-9da5-31c5ed1b055d"],

Cell["\<\
# Wolfram \[AHat]\.86\.94 Python
## general
---
 Name | Wolfram | Python
:---:|:---|:---
func|<pre><code>f[x_]:=2 + x;f[2]</code></pre>|<pre><code>def f(x):<br>\t\
return 2 + x<br>f(2)<br></code></pre>
global|<pre><code>Names[\"Global`*\"]</code></pre>|<pre><code>globals()</code>\
</pre>
print|<pre><code>Print[\"Hello world\"]</code></pre>|<pre><code>print(\"Hello \
world\")</code></pre>
range|<pre><code>Range[0,7,2]</code></pre>|<pre><code>range(0,7,2)</code></pre>


## dict
---
 Name | Wolfram | Python
:---:|:---|:---
dict|<pre><code><\\|\"a\" -> 2, \"b\" -> 2, \"c\" -> \
6\\|></code></pre>|<pre><code>{\"a\": 2, \"b\": 2, \"c\": 6}</code></pre>
dict access|<pre><code><\\|\"a\" -> 2, \"b\" -> 2, \"c\" -> \
6\\|>[\"a\"]</code></pre>|<pre><code>{\"a\": 2, \"b\": 2, \"c\": \
6}[\"a\"]</code></pre>


## functional programming
---
 Name | Wolfram | Python
:---:|:---|:---
func nest|<pre><code>NestList[f[#]&,2,3]</code></pre>|<pre><code>def nest(f, \
x, times):<br>    y = [x]<br>    for i in range(times-1):<br>        \
y.append(f(y[-1]))<br>    return y<br>nest(f,2,3)<br></code></pre>
map|<pre><code>Function[x,2 + x]/@{2, 2, \
6}</code></pre>|<pre><code>map(lambda x : 2 + x, [2, 2, 6])</code></pre>


## list
---
 Name | Wolfram | Python
:---:|:---|:---
list|<pre><code>{2, 2, 6}</code></pre>|<pre><code>[2, 2, 6]</code></pre>
list append|<pre><code>l={2, 2, 6}; AppendTo[l,2]; \
l</code></pre>|<pre><code>l=[2, 2, 6]; l.append(2); l</code></pre>
list length|<pre><code>Length[{2, 2, 6}]</code></pre>|<pre><code>len([2, 2, \
6])</code></pre>
list slicing|<pre><code>{2, 2, 6}[[1;;;;2]]</code></pre>|<pre><code>[2, 2, \
6][0::2]</code></pre>
list zip|<pre><code>Transpose@{{\"a\", \"b\", \"c\"},{2, 2, \
6}}</code></pre>|<pre><code>list(zip([\"a\", \"b\", \"c\"],[2, 2, \
6]))</code></pre>
unique list|<pre><code>DeleteDuplicates[{2, 2, \
6}]</code></pre>|<pre><code>set([2, 2, 6])</code></pre>


## procedural programming
---
 Name | Wolfram | Python
:---:|:---|:---
if|<pre><code>If[3>2,Print[\"true\"]]</code></pre>|<pre><code>if 3 > 2:<br>\t\
print(\"true\")<br></code></pre>


## string
---
 Name | Wolfram | Python
:---:|:---|:---
string format|<pre><code>StringForm[\"The values are x=`` and y=``.\", 5, \
10]</code></pre>|<pre><code>\"The values are x={} and y={}.\".format(5, \
10)</code></pre>
string join|<pre><code>StringRiffle[{2, 2, 6}, \" \
\"]</code></pre>|<pre><code>' '.join([\"2\", \"2\", \"6\"])</code></pre>

\
\>", "Print",
 CellChangeTimes->{
  3.866717042140605*^9, 3.866717080137032*^9, {3.866717127698897*^9, 
   3.866717142974844*^9}, 3.8667171991059437`*^9, 3.866717306639189*^9, {
   3.866717582268354*^9, 3.866717585084917*^9}, 3.86672650627569*^9, 
   3.866737527590876*^9, 3.866739939594399*^9, 3.866745888001306*^9, {
   3.866746291412662*^9, 3.8667463068648767`*^9}, 3.866746375681501*^9, 
   3.86676372121944*^9, 3.866763757940673*^9, 3.866763818507144*^9, 
   3.86676387822163*^9, 3.866763964001481*^9, 3.866830656028542*^9, 
   3.866830746902442*^9, 3.8668937328674717`*^9, 3.866893911579048*^9, 
   3.867944030099721*^9, 3.8682937899758997`*^9, 3.868294176227726*^9, 
   3.868294234714136*^9, 3.868294433221415*^9, 3.868294469487859*^9, 
   3.8682981501198387`*^9},
 CellLabel->
  "During evaluation of \
In[402]:=",ExpressionUUID->"f907166b-89c3-4050-8cb1-205e2f7ff73d"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.868013389665948*^9},ExpressionUUID->"cfef3007-a7a9-4322-8f7d-\
d3ffc76da0da"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.8680134312599983`*^9},ExpressionUUID->"ac3fa319-fd5e-4b07-8a2f-\
e14bed9817d1"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1792, 971},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
SpellingDictionaries->{"CorrectWords"->{
 "ldd", "Multiagent", "numpy", "tf", "nn", "possiton", "realisitic", "md"}},
FrontEndVersion->"13.0 for Mac OS X x86 (64-bit) (December 3, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"ae260384-1012-4561-8ed7-db887e83d4e1"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 206, 4, 98, "Title",ExpressionUUID->"ad3229aa-57fe-472d-816d-4fd739d755b5"],
Cell[CellGroupData[{
Cell[811, 30, 211, 4, 67, "Section",ExpressionUUID->"d611597b-733b-4dd8-8c20-ae5a9ed0044e"],
Cell[CellGroupData[{
Cell[1047, 38, 17699, 396, 2614, "Input",ExpressionUUID->"253888d4-2f88-4105-ad37-80c285c2b5ef"],
Cell[18749, 436, 5098, 82, 547, "Output",ExpressionUUID->"88473c93-1a63-4c5a-8219-bd298772c830"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23884, 523, 124, 2, 30, "Input",ExpressionUUID->"268ae34f-a59d-4266-8191-51a56c467b93"],
Cell[24011, 527, 82718, 1585, 635, "Output",ExpressionUUID->"c173efcc-e530-404c-84cf-5ec078bcd08e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[106778, 2118, 207, 4, 67, "Section",ExpressionUUID->"7f941233-b9db-4632-9cf8-8495c18bb28c"],
Cell[CellGroupData[{
Cell[107010, 2126, 4935, 124, 367, "Input",ExpressionUUID->"9b3ac6b0-cbf3-45b5-97f4-7d104769edd5"],
Cell[111948, 2252, 10332, 259, 299, "Output",ExpressionUUID->"b3bf4438-a4c6-411a-8f96-9a62e43ed60a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122317, 2516, 481, 13, 30, "Input",ExpressionUUID->"24b16859-65e7-473d-9ab0-fd8f2fef4c84"],
Cell[122801, 2531, 35815, 649, 227, "Output",ExpressionUUID->"a6228d04-f86e-4f1c-af91-ae277ad7347d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[158665, 3186, 215, 4, 67, "Section",ExpressionUUID->"84f2eaf5-6b30-442b-9eae-43f3f097c7bf"],
Cell[158883, 3192, 5741, 130, 514, "Input",ExpressionUUID->"ed9e8cb1-7dc5-4d90-9b80-b69bf821c8cf"],
Cell[CellGroupData[{
Cell[164649, 3326, 6638, 164, 577, "Input",ExpressionUUID->"8f5a5061-141d-429b-8061-e4325b1d7030"],
Cell[CellGroupData[{
Cell[171312, 3494, 988, 16, 24, "Print",ExpressionUUID->"e741ba8d-cc41-474c-a085-4645224ca54f"],
Cell[172303, 3512, 969, 16, 24, "Print",ExpressionUUID->"411d4ef3-cf00-4a0c-a719-63a4fb237d5b"],
Cell[173275, 3530, 912, 15, 24, "Print",ExpressionUUID->"ce821f03-16ed-4bd9-9da5-31c5ed1b055d"],
Cell[174190, 3547, 3332, 89, 925, "Print",ExpressionUUID->"f907166b-89c3-4050-8cb1-205e2f7ff73d"]
}, Open  ]]
}, Open  ]],
Cell[177549, 3640, 128, 3, 30, "Input",ExpressionUUID->"cfef3007-a7a9-4322-8f7d-d3ffc76da0da"],
Cell[177680, 3645, 130, 3, 30, "Input",ExpressionUUID->"ac3fa319-fd5e-4b07-8a2f-e14bed9817d1"]
}, Open  ]]
}, Open  ]]
}
]
*)

